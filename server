#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <sys/un.h>

#define SOCKET_PATH "/tmp/my_unix_socket"

int main() {
    int server_fd, client_fd;
    socklen_t client_len;
    struct sockaddr_un server_addr, client_addr;
    char buffer[1024];

    // Create socket
    if ((server_fd = socket(AF_UNIX, SOCK_STREAM, 0)) == -1) {
        perror("socket");
        exit(EXIT_FAILURE);
    }

    // Initialize server address structure
    memset(&server_addr, 0, sizeof(server_addr));
    server_addr.sun_family = AF_UNIX;
    strncpy(server_addr.sun_path, SOCKET_PATH, sizeof(server_addr.sun_path) - 1);

    // Bind socket to address
    if (bind(server_fd, (struct sockaddr*)&server_addr, sizeof(server_addr)) == -1) {
        perror("bind");
        exit(EXIT_FAILURE);
    }

    // Listen for connections
    if (listen(server_fd, 5) == -1) {
        perror("listen");
        exit(EXIT_FAILURE);
    }

    printf("Server listening on %s\n", SOCKET_PATH);

    // Accept incoming connection
    client_len = sizeof(client_addr);
    if ((client_fd = accept(server_fd, (struct sockaddr*)&client_addr, &client_len)) == -1) {
        perror("accept");
        exit(EXIT_FAILURE);
    }

    printf("Connection accepted from client\n");

    // Receive data from client
    ssize_t num_bytes;
    if ((num_bytes = recv(client_fd, buffer, sizeof(buffer), 0)) == -1) {
        perror("recv");
        exit(EXIT_FAILURE);
    }

    buffer[num_bytes] = '\0';
    printf("Received message from client: %s\n", buffer);

    // Close sockets
    close(client_fd);
    close(server_fd);

    // Remove socket file
    unlink(SOCKET_PATH);

    return 0;
}

